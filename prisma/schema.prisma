// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  userId            String            @id @default(cuid()) @map("_id")
  email             String            @unique
  firstName         String
  lastName          String
  contactNumber     String
  deliveryAddressId String?
  isBlocked         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deliveryAddress   DeliveryAddress[]
  orders            Order[]
  reviews           Review[]
}

model DeliveryAddress {
  addressId    String   @id @default(cuid()) @map("_id")
  addressType  String
  userId       String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  landmark     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId])
  orders       Order[]
}

model Product {
  productId     String      @id @default(cuid()) @map("_id")
  categoryId    String
  subCategoryId String
  productName   String
  description   String
  price         Float
  stock         Int
  imageUrl      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]
  category      Category    @relation(fields: [categoryId], references: [categoryId])
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [subCategoryId])
  reviews       Review[]
}

model Order {
  orderId           String          @id @default(cuid()) @map("_id")
  userId            String
  deliveryAddressId String
  totalAmount       Float
  paymentMethod     String
  paymentStatus     String
  contactNumber     String
  deliveryDate      DateTime
  orderStatus       String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [userId])
  orderItems        OrderItem[]
  address           DeliveryAddress @relation(fields: [deliveryAddressId], references: [addressId])
}

model OrderItem {
  orderItemId String   @id @default(cuid()) @map("_id")
  orderId     String
  productId   String
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [orderId])
  product     Product  @relation(fields: [productId], references: [productId])
}

model Category {
  categoryId    String        @id @default(cuid()) @map("_id")
  categoryName  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]
  subCategories SubCategory[]
}

model SubCategory {
  subCategoryId   String    @id @default(cuid()) @map("_id")
  categoryId      String
  subCategoryName String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  products        Product[]
  category        Category  @relation(fields: [categoryId], references: [categoryId])
}

model Review {
  reviewId  String   @id @default(cuid()) @map("_id")
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId])
  product   Product  @relation(fields: [productId], references: [productId])
}

model Admin {
  adminId   String   @id @default(cuid()) @map("_id")
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
